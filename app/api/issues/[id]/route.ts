import authOptions from "@/app/auth/authOptions";
import { patchIssueSchema } from "@/app/validationSchemas";
import prisma from "@/prisma/client";
import { Prisma } from "@prisma/client";
import { getServerSession } from "next-auth";
import { NextRequest, NextResponse } from "next/server";

export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  //Validate the title and description as schema You want the data shape
  // const session = await getServerSession(authOptions);
  // if (!session) return NextResponse.json({}, { status: 401 });
  const body = await request.json();
   const validation = patchIssueSchema.safeParse(body);
  if (!validation.success)
     return NextResponse.json(validation.error.format(), { status: 400 });

    const { assignedToUserId, title, description } = body;
    if (assignedToUserId) {
      const user = await prisma.user.findUnique({
        where: { id: assignedToUserId },
      });

    if (!user)
      return NextResponse.json(
        { error: "Invalid user." },
        { status: 400 }
      );
  }

  //Check if Issue with id found or not
  const issue = await prisma.issue.findUnique({
    where: { id: parseInt(params.id) },
  });
  //if Not return error
  if (!issue)
  return NextResponse.json(
    { error: "Invalid issue" },
    { status: 404 }
  );
  //if found update the given id with the found id in DB with the new Data
  const updatedIssue = await prisma.issue.update({
    where: { id: issue.id },
    data: {
      title,
      description,
      assignedToUserId
    } as Prisma.IssueUpdateInput, //ensures that TypeScript recognizes the correct type for the data object. The Prisma.IssueUpdateInput type is generated by Prisma and contains the correct definitions for the update fields.
  });

  return NextResponse.json(updatedIssue);
}
  //Send the updated data to the server


export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const session = await getServerSession(authOptions);
  if (!session) return NextResponse.json({}, { status: 401 });
  const issue = await prisma.issue.findUnique({
    //Check if id found in DB
    where: { id: parseInt(params.id) },
  });
  if (!issue)
    return NextResponse.json({ error: "Invalid Issue" }, { status: 404 });

  await prisma.issue.delete({
    //If id found in DB go delete it
    where: { id: issue.id },
  });
  return NextResponse.json({});
}
